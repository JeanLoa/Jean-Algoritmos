#include "pch.h""
#include <iostream>
#include <conio.h>
#include <Windows.h>
#include <iomanip>

using namespace std;
using namespace System;

void setColor(int color) {
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hConsole, color);
}

int randnum(int min, int max) {
	return min + rand() % (max - min + 1);
}

int randX() {
	return randnum(2, 110);
}

int randY() {
	return randnum(2, 25);
}

int randD() {
	int num = randnum(1, 2);
	return num == 1 ? 1 : -1;
}

class Animal {
protected:
	int x, y;
	int dx, dy;
	int ancho, alto;
	int color;
	const int LIM_X1 = 2, LIM_X2 = 110, LIM_Y1 = 2, LIM_Y2 = 28;
public:
	Animal() : x(1), y(1), dx(1), dy(1), color(8) {}
	Animal(int x, int y, int dx, int dy, int color, int ancho, int alto) : x(x), y(y), dx(dx), dy(dy), color(color), ancho(ancho), alto(alto) {}
	virtual ~Animal() {}
	virtual void dibujar() = 0;
	virtual void borrar() = 0;
	virtual void mover() = 0;
	int getAncho() {
		return this->ancho;
	}
	int getAlto() {
		return this->alto;
	}
	int getX() {
		return this->x;
	}
	int getY() {
		return this->y;
	}
	void setX(int x) {
		this->x = x;
	}
	void setY(int y) {
		this->y = y;
	}
};

class Raton : public Animal {
public:
	Raton(int x, int y, int dx, int dy, int color, int ancho, int alto) : Animal(x, y, dx, dy, color, ancho, alto) {}
	~Raton() {}
	void dibujar() override {
		setColor(color);
		Console::SetCursorPosition(x, y); cout << "--(_c'>";
	}
	void mover() override {
		if (x == 2 && y == 2) dx *= -1, dy *= -1;
		else if (x == 2 && y == 28) dx *= -1, dy *= -1;
		else if (x == 110 && y == 2) dx *= -1, dy *= -1;
		else if (x == 110 && y == 28) dx *= -1, dy *= -1;
		else if (x < 2 || x > 110) dx *= -1;
		else if (y < 2 || y > 28) dy *= -1;
		x += dx;
		y += dy;
		setX(x);
		setY(y);
	}
	void borrar() override {
		Console::SetCursorPosition(x, y);  cout << string(ancho, ' ');
	}
};

class Gato : public Animal {
public:
	Gato() : Animal(1, 1, 1, 1, 3, 7, 3) {}
	Gato(int x, int y, int dx, int dy, int color, int ancho, int alto) : Animal(x, y, dx, dy, color, ancho, alto) {}
	~Gato() {}
	void dibujar() override {

	}
	void dibujar(int x, int y) {
		setColor(color);
		Console::SetCursorPosition(x, y);   cout << " /\\_/\\ ";
		Console::SetCursorPosition(x, y + 1); cout << "( o.o )";
		Console::SetCursorPosition(x, y + 2); cout << " > ^ < ";
	}
	void mover() override {

	}
	void mover(char input) {
		switch (input) {
		case 'W':
			y -= dy;
			break;
		case 'A':
			x -= dx;
			break;
		case 'S':
			y += dy;
			break;
		case 'D':
			x += dx;
			break;
		}
		if (x <= 1) x = 1;
		if (x >= 112) x = 112;
		if (y <= 1) y = 1;
		if (y >= 26) y = 26;
	}
	void borrar() override {

	}
	void borrar(int x, int y) {
		Console::SetCursorPosition(x, y);   cout << string(ancho, ' ');
		Console::SetCursorPosition(x, y + 1); cout << string(ancho, ' ');
		Console::SetCursorPosition(x, y + 2); cout << string(ancho, ' ');
	}
};

class Juego {
private:
	int ratones_totales;
	int ratones_cazados;
	float contador;
	Gato* gato;
	Raton** ratones;
	int n_Ratones;
public:
	Juego() : gato(new Gato(57, 14, 1, 1, 3, 7, 1)), n_Ratones(n_Ratones) {
		ratones_cazados = 0;
		contador = 0;
		n_Ratones = randnum(7, 15);
		ratones_totales = n_Ratones;
		ratones = new Raton * [n_Ratones];
		for (int i = 0; i < n_Ratones; ++i) {
			ratones[i] = new Raton(randX(), randY(), randD(), randD(), 8, 7, 1);
		}
	}
	~Juego() {
		delete gato;
		for (int i = 0; i < n_Ratones; ++i) {
			delete ratones[i];
		}
		delete[] ratones;
	}
	void moverGato() {
		if (_kbhit()) {
			int prevx = gato->getX();
			int prevy = gato->getY();
			char input = toupper(_getch());
			gato->mover(input);
			gato->borrar(prevx, prevy);
			gato->dibujar(gato->getX(), gato->getY());
		}
	}
	void moverRatones() {
		for (int i = 0; i < n_Ratones; ++i) {
			ratones[i]->borrar();
			ratones[i]->mover();
			ratones[i]->dibujar();
		}
	}
	int getRatones_Totales() {
		return this->ratones_totales;
	}
	int getN_Ratones() {
		return this->n_Ratones;
	}
	void eliminarRaton(int indice) {
		delete ratones[indice];
		for (int i = indice; i < n_Ratones - 1; ++i) {
			ratones[i] = ratones[i + 1];
		}
		Raton** copia = new Raton * [n_Ratones - 1];
		for (int i = 0; i < n_Ratones - 1; ++i) {
			copia[i] = ratones[i];
		}
		delete[] ratones;
		ratones = copia;
		--n_Ratones;
	}
	void agregarRaton() {
		Raton* nuevo = new Raton(randX(), randY(), randD(), randD(), 8, 7, 1);
		Raton** copia = new Raton * [n_Ratones + 1];
		for (int i = 0; i < n_Ratones; ++i) {
			copia[i] = ratones[i];
		}
		copia[n_Ratones] = nuevo;
		delete[] ratones;
		ratones = copia;
		++n_Ratones;
		++ratones_totales;
	}
	void setRatonesCazados(int valor) {
		this->ratones_cazados = valor;
	}
	int getRatones_Cazados() {
		return this->ratones_cazados;
	}
	void setContador(float contador) {
		this->contador = contador;
	}
	float getContador() {
		return this->contador;
	}
	void mostrarContador() {
		Console::SetCursorPosition(1, 29);
		cout << setw(2) << getContador();
		if (getContador() >= 2) {
			agregarRaton();
			setContador(0);
		}
	}
	void colision() {
		for (int i = 0; i < n_Ratones; ++i) {
			bool eliminado = false;
			for (int dx = 0; dx < 7; ++dx) {
				for (int dy = 0; dy < 3; ++dy) {
					int x = gato->getX();
					int y = gato->getY();
					if (x + dx >= ratones[i]->getX() && x + dx <= ratones[i]->getX() + ratones[i]->getAncho() - 1 &&
						y + dy >= ratones[i]->getY() && y + dy <= ratones[i]->getY() + ratones[i]->getAlto() - 1) {
						ratones[i]->borrar();
						eliminarRaton(i);
						setRatonesCazados(getRatones_Cazados() + 1);
						eliminado = true;
						break;
					}
				}
				if (eliminado) break;
			}
			if (eliminado) --i;
		}
	}
	bool victoria() {
		return ratones_cazados >= ratones_totales / 2;
	}
	void iniciarJuego() {
		bool vic = false;
		while (!vic) {
			gato->dibujar(gato->getX(), gato->getY());
			moverGato();
			moverRatones();
			colision();
			mostrarContador();
			setContador(getContador() + 0.07);
			vic = victoria();
			Sleep(50);
		}
		setColor(4);
		system("cls");
		cout << "El juego ha terminado";
		cout << "\nHas cazado " << getRatones_Cazados() << " de " << getRatones_Totales() << "ratones";
		Sleep(5000);
		setColor(0);
	}
};

int main() {
	Console::CursorVisible = false;
	srand(time(0));
	Juego* juego = new Juego();
	juego->iniciarJuego();
	return 0;
}
