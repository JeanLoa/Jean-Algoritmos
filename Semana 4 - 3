#include "pch.h"
#include <iostream>
#include <iomanip>
#include <Windows.h>
#include <conio.h>
using namespace System;
using namespace std;

int randnum(int min, int max) {
    return min + rand() % (max - min + 1);
}

void setColor(int color) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, color);
}

class Fuselaje { // Cuerpo del avion
private:
    float x, y;
public:
    Fuselaje(float x, float y): x(x), y(y){}
    ~Fuselaje(){}
    void dibujarFuselaje() {
        Console::SetCursorPosition(int(x + 1), int(y));
        cout << "___|___";
        Console::SetCursorPosition(int(x + 4), int(y + 1));
        cout << "O";
    }
    void setX(float x) {
        this->x = x;
    }
    void setY(float y) {
        this->y = y;
    }
};

class Alas { // Alas del avion
private:
    float x, y;
    char forma;
public:
    Alas(float x, float y, char forma): x(x), y(y), forma(forma){}
    ~Alas(){}
    void dibujarAlas() {
        Console::SetCursorPosition(int(x), int(y));
        cout << forma << forma << forma;
    }
    void setX(float x) {
        this->x = x;
    }
    void setY(float y) {
        this->y = y;
    }
};

class TrendeAterrizaje { // Llantas de aterrizaje
private:
    float x, y;
    char forma;
public:
    TrendeAterrizaje(float x, float y, char forma): x(x), y(y), forma(forma){}
    ~TrendeAterrizaje(){}
    void dibujarTren() {
        Console::SetCursorPosition(int(x), int(y));
        cout << forma;
    }
    void setX(float x) {
        this->x = x;
    }
    void setY(float y) {
        this->y = y;
    }
};

class Avion {
private:
    Alas** alas;
    TrendeAterrizaje** trenes;
    Fuselaje* fuselaje;
    float x, y;
    float dx, dy;
    int color;
public:
    Avion(float x, float y) {
        this->x = x;
        this->y = y;
        this->dx = 0.1 + (float)rand() / RAND_MAX;
        this->dy = randnum(1, 3);
        this->color = randnum(1, 15);
        alas = new Alas * [2];
        alas[0] = new Alas(x, y + 1, '-');
        alas[1] = new Alas(x + 6, y + 1, '-');
        trenes = new TrendeAterrizaje*[2];
        trenes[0] = new TrendeAterrizaje(x + 3, y + 1, 'o');
        trenes[1] = new TrendeAterrizaje(x + 5, y + 1, 'o');
        fuselaje = new Fuselaje(x, y);
    }
    ~Avion() {
        delete[] alas;
        delete[] trenes;
        delete fuselaje;
    }
    void mover() {
        if (x >= x - 2 && x <= x + 2) {
            if (x == x - 2 || x == x + 2) {
                dx *= -1;
            }
            x += dx;
        }
        if (y >= 25) {
            dy = 0;
            dx = 0;
        }
        y += dy;
        // Asignacion X
        alas[0]->setX(x);
        alas[1]->setX(x + 6);
        trenes[0]->setX(x + 3);
        trenes[1]->setX(x + 5);
        fuselaje->setX(x);
        // Asignacion Y
        alas[0]->setY(y + 1);
        alas[1]->setY(y + 1);
        trenes[0]->setY(y + 1);
        trenes[1]->setY(y + 1);
        fuselaje->setY(y);

    }
    void borrar() {
        Console::SetCursorPosition(int(x), int(y));     cout << "         ";
        Console::SetCursorPosition(int(x), int(y + 1)); cout << "         ";
    }
    void dibujar() {
        setColor(color);
        for (int i = 0; i < 2; ++i) {
            alas[i]->dibujarAlas();
            trenes[i]->dibujarTren();
        }
        
        fuselaje->dibujarFuselaje();
    }
    float getY() {
        return y;
    }
};

class Aterrizaje {
private:
    Avion** aviones;
    int n;
public:
    Aterrizaje() {
        n = randnum(2, 7);
        aviones = new Avion * [n];
        for (int i = 0; i < n; ++i) {
            aviones[i] = new Avion(15 * i + 5, 1);
        }
    }
    ~Aterrizaje() {
        delete[] aviones;
    }
    void iniciarCarrera(char input) {
        system("cls");
        bool* validacion = new bool[n] {false};
        bool todosaterrizados = false;
        for (int i = 0; i < n; ++i) {
            if (input == 'G') {
                while (true) {
                    for (int i = 0; i < n; ++i) {
                        aviones[i]->borrar();
                        aviones[i]->mover();
                        aviones[i]->dibujar();
                    }

                    todosaterrizados = true;
                    for (int i = 0; i < n; ++i) {
                        if (aviones[i]->getY() == 25) {
                            validacion[i] = true;
                        }
                        if (!validacion[i]) {
                            todosaterrizados = false;
                        }
                    }
                    if (todosaterrizados) {
                        system("cls");
                        setColor(7);
                        cout << "El aterrizaje ha concluido";
                        exit(0);
                    }
                    Sleep(500);
                }
            }
        }
    }
};

int main()
{
    srand(time(0));
    Aterrizaje* ObjAterrizaje = new Aterrizaje;
    cout << "Presione G para empezar la carrera";
    while (true) {
        if (_kbhit()) {
            char input = toupper(_getch());
            ObjAterrizaje->iniciarCarrera(input);
        }
    }
    return 0;
}
